import React, { createContext, useContext, useState, useEffect } from "react";
import { AuthApi } from "./authApi.js";

const AuthContext = createContext(null);

export function AuthProvider({ children }) {
  const [authToken, setAuthToken] = useState(null);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [refreshLoading, setRefreshLoading] = useState(false);

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ refresh_token cookie
  const hasRefreshToken = () => {
    const cookies = document.cookie;
    return cookies.includes('refresh_token=');
  };

  useEffect(() => {
    async function initAuth() {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∑–∞–≥–∞–ª—ñ —î refresh_token –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
      if (!hasRefreshToken()) {
        console.log("No refresh token found - user not authenticated");
        setLoading(false);
        return;
      }

      try {
        // üîÑ –°–ø–µ—Ä—à—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ refresh
        const refreshRes = await AuthApi.refreshToken();
        
        if (refreshRes?.authToken) {
          setAuthToken(refreshRes.authToken);
          setUser(refreshRes.user ?? null);
        } else {
          // –Ø–∫—â–æ refresh –Ω–µ –≤–¥–∞–≤—Å—è, –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
          setAuthToken(null);
          setUser(null);
        }
      } catch (error) {
        // –ë—É–¥—å-—è–∫–∞ –ø–æ–º–∏–ª–∫–∞ = –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
        console.log("Auto-authentication failed:", error.message);
        setAuthToken(null);
        setUser(null);
      } finally {
        setLoading(false);
      }
    }
    
    initAuth();
  }, []);

  async function login(email, password) {
    try {
      const res = await AuthApi.login({ email, password });
      // ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ –Ω–∞–∑–≤–∏ –ø–æ–ª—ñ–≤ –∑ –±–µ–∫–µ–Ω–¥—É
      setAuthToken(res.authToken);
      setUser(res.user ?? null);
      return { success: true };
    } catch (error) {
      console.error("Login error:", error);
      return { success: false, error: error.message };
    }
  }

  async function logout() {
    try {
      await AuthApi.logout();
    } catch (error) {
      console.error("Logout error:", error);
    } finally {
      setAuthToken(null);
      setUser(null);
    }
  }

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
  const refreshAuth = async () => {
    if (refreshLoading) return null;
    
    setRefreshLoading(true);
    try {
      const refreshRes = await AuthApi.refreshToken();
      if (refreshRes?.authToken) {
        setAuthToken(refreshRes.authToken);
        setUser(refreshRes.user ?? null);
        return refreshRes.authToken;
      }
      return null;
    } catch (error) {
      console.error("Manual refresh failed:", error);
      // –ü—Ä–∏ –Ω–µ—É—Å–ø—ñ—à–Ω–æ–º—É refresh - —Ä–æ–∑–ª–æ–≥—ñ–Ω—é—î–º–æ
      setAuthToken(null);
      setUser(null);
      return null;
    } finally {
      setRefreshLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  const isAuthenticated = () => {
    return !!authToken && !!user;
  };

  const value = {
    // –°—Ç–∞–Ω
    authToken,
    user,
    loading,
    refreshLoading,
    
    // –§—É–Ω–∫—Ü—ñ—ó
    login,
    logout,
    refreshAuth,
    isAuthenticated,
    
    // –°–µ—Ç–µ—Ä–∏
    setAuthToken,
    setUser,
    
    // –£—Ç–∏–ª—ñ—Ç–∏
    hasRefreshToken
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}