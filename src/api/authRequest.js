import { request as baseRequest } from "./apiClient";
import { useAuth } from "./AuthContext";

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–∏–º refresh –≤ —Ö—É–∫—É
let isRefreshing = false;
let refreshSubscribers = [];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –≤ —á–µ—Ä–≥—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
function addRefreshSubscriber(callback) {
  refreshSubscribers.push(callback);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤ –∑ —á–µ—Ä–≥–∏ –ø—ñ—Å–ª—è refresh
function onRefreshed(authToken, user) {
  refreshSubscribers.forEach(callback => callback(authToken, user));
  refreshSubscribers = [];
}

/**
 * –•—É–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó request, —è–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î authToken
 * —Ç–∞ –æ–±—Ä–æ–±–ª—è—î refresh token –∑ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—î—é –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
 */
export function useAuthRequest() {
  const { authToken, setAuthToken, setUser, refreshAuth } = useAuth();

  const authRequest = async (url, options = {}) => {
    const headers = {
      ...options.headers,
    };

    // ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ authToken –∑–∞–º—ñ—Å—Ç—å accessToken
    if (authToken) {
      headers["Authorization"] = `Bearer ${authToken}`;
    }

    try {
      const response = await baseRequest(url, { ...options, headers });
      return response;
    } catch (err) {
      // –Ø–∫—â–æ 401 ‚Äî —Å–ø—Ä–æ–±—É—î–º–æ refresh
      if (err.status === 401) {
        // –Ø–∫—â–æ –≤–∂–µ –π–¥–µ –ø—Ä–æ—Ü–µ—Å refresh - –¥–æ–¥–∞—î–º–æ –∑–∞–ø–∏—Ç –≤ —á–µ—Ä–≥—É
        if (isRefreshing) {
          return new Promise((resolve, reject) => {
            addRefreshSubscriber((newAuthToken, newUser) => {
              // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º
              const retryHeaders = {
                ...headers,
                "Authorization": `Bearer ${newAuthToken}`
              };
              baseRequest(url, { ...options, headers: retryHeaders })
                .then(resolve)
                .catch(reject);
            });
          });
        }

        isRefreshing = true;

        try {
          console.log("üîÑ useAuthRequest: Token expired, attempting refresh...");
          
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ refreshAuth –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∑–∞–º—ñ—Å—Ç—å –ø—Ä—è–º–æ–≥–æ –≤–∏–∫–ª–∏–∫—É AuthApi
          const newAuthToken = await refreshAuth();
          
          if (newAuthToken) {
            console.log("‚úÖ useAuthRequest: Token refresh successful");
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç (–≤–∂–µ –∑—Ä–æ–±–ª–µ–Ω–æ –≤ refreshAuth, –∞–ª–µ –¥–ª—è –±–µ–∑–ø–µ–∫–∏)
            // –°–ø–æ–≤—ñ—â–∞—î–º–æ –≤—Å—ñ –æ—á—ñ–∫—É—é—á—ñ –∑–∞–ø–∏—Ç–∏
            onRefreshed(newAuthToken, null);
            
            // –ü–æ–≤—Ç–æ—Ä—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∑–∞–ø–∏—Ç –∑ –Ω–æ–≤–∏–º —Ç–æ–∫–µ–Ω–æ–º
            headers["Authorization"] = `Bearer ${newAuthToken}`;
            return await baseRequest(url, { ...options, headers });
          } else {
            throw new Error("No authToken received from refresh");
          }
        } catch (refreshError) {
          console.error("‚ùå useAuthRequest: Token refresh failed:", refreshError);
          
          // –°–ø–æ–≤—ñ—â–∞—î–º–æ –≤—Å—ñ –æ—á—ñ–∫—É—é—á—ñ –∑–∞–ø–∏—Ç–∏ –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
          refreshSubscribers.forEach(callback => callback(null, null));
          refreshSubscribers = [];
          
          throw new Error("Session expired. Please login again.");
        } finally {
          isRefreshing = false;
        }
      }
      throw err;
    }
  };

  return authRequest;
}

/**
 * –•—É–∫ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–∏—Ö –º–µ—Ç–æ–¥—ñ–≤ API –∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—î—é
 */
export function useAuthApi() {
  const authRequest = useAuthRequest();

  return {
    // –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥
    request: authRequest,
    
    // GET –∑–∞–ø–∏—Ç
    get: (url, options = {}) => authRequest(url, { ...options, method: 'GET' }),
    
    // POST –∑–∞–ø–∏—Ç
    post: (url, data, options = {}) => authRequest(url, { 
      ...options, 
      method: 'POST', 
      body: data 
    }),
    
    // PUT –∑–∞–ø–∏—Ç
    put: (url, data, options = {}) => authRequest(url, { 
      ...options, 
      method: 'PUT', 
      body: data 
    }),
    
    // DELETE –∑–∞–ø–∏—Ç
    delete: (url, options = {}) => authRequest(url, { ...options, method: 'DELETE' }),
    
    // PATCH –∑–∞–ø–∏—Ç
    patch: (url, data, options = {}) => authRequest(url, { 
      ...options, 
      method: 'PATCH', 
      body: data 
    }),

    // –°–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞–Ω–∏–º–∏
    upload: (url, formData, options = {}) => authRequest(url, {
      ...options,
      method: 'POST',
      body: formData,
      headers: {
        ...options.headers,
        // –ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ Content-Type –¥–ª—è FormData - –±—Ä–∞—É–∑–µ—Ä –∑—Ä–æ–±–∏—Ç—å —Ü–µ —Å–∞–º
      },
    }),
  };
}

/**
 * –•—É–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Ç–æ–º
 */
export function useProtectedRequest() {
  const { isAuthenticated } = useAuth();
  const authRequest = useAuthRequest();

  const protectedRequest = async (url, options = {}) => {
    if (!isAuthenticated()) {
      throw new Error("Authentication required");
    }
    return authRequest(url, options);
  };

  return protectedRequest;
}

/**
 * –•—É–∫ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API, —è–∫–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –Ω–∞ –ª–æ–≥—ñ–Ω –ø—Ä–∏ 401
 */
export function useAuthRequestWithRedirect() {
  const { logout } = useAuth();
  const authRequest = useAuthRequest();

  const authRequestWithRedirect = async (url, options = {}) => {
    try {
      return await authRequest(url, options);
    } catch (err) {
      if (err.status === 401) {
        console.log("Redirecting to login due to authentication error");
        // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –ª–æ–≥—ñ–Ω —Å—Ç–æ—Ä—ñ–Ω–∫—É
        // navigate('/login');
        await logout();
      }
      throw err;
    }
  };

  return authRequestWithRedirect;
}